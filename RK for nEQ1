import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
# function that returns dy/dt
def model(y, t):
    k = 0.3
    dydt = -k * y
    return dydt

# initial condition
y0 = 5

# time points
t = np.linspace(0,20)

# solve ODE
y = odeint(model,y0,t)

# plot results
plt.plot(t,y)
plt.xlabel('time')
plt.ylabel('y(t)')
plt.show()

def rungeKutt(func, y0, x):
    y=[]
    y=np.append(y, y0)
    h=x[1]-x[0]
    for i in range(len(x)-1):
        k1=func(x[i],y[i])
        k2=func(x[i]+h/2,y[i]+h*k1/2)
        k3=func(x[i]+h/2,y[i]+h*k2/2)
        k4=func(x[i]+h,y[i]+h*k3)
        y=np.append(y, y[i]+h*(k1+2*k2+2*k3+k4)/6)
    return y
        
def model(t, y):
    k = 0.3
    dydt = -k * y
    return dydt

yn=rungeKutt(model, y0, t)
plt.plot(t,yn)
plt.xlabel('time')
plt.ylabel('y(t)')
plt.show()

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

# function that returns dz/dt
def model(z,t):
    dxdt = 3.0 * np.exp(-t)
    dydt = -z[1] + 3
    dzdt = [dxdt,dydt]
    return dzdt

# initial condition
z0 = [0,0]

# time points
t = np.linspace(0,5)

# solve ODE
z = odeint(model,z0,t)

# plot results
plt.plot(t,z[:,0],'b-',label=r'$\frac{dx}{dt}=3 \; \exp(-t)$')
plt.plot(t,z[:,1],'r--',label=r'$\frac{dy}{dt}=-y+3$')
plt.ylabel('response')
plt.xlabel('time')
plt.legend(loc='best')
plt.show()
